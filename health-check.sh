#!/bin/bash

echo "üîç V√©rification de sant√© du projet ALV-FORMULAIRES..."

# V√©rifier que les fichiers critiques existent
echo "üìÅ V√©rification des fichiers critiques..."
if [ ! -f "app/globals.css" ]; then
    echo "‚ùå app/globals.css manquant !"
    exit 1
fi

if [ ! -f "tailwind.config.ts" ]; then
    echo "‚ùå tailwind.config.ts manquant !"
    exit 1
fi

if [ ! -f "next.config.mjs" ]; then
    echo "‚ùå next.config.mjs manquant !"
    exit 1
fi

# V√©rifier le contenu de globals.css
echo "üìù V√©rification du contenu de globals.css..."
if ! grep -q "@tailwind base" "app/globals.css"; then
    echo "‚ùå @tailwind base manquant dans globals.css !"
    exit 1
fi

if ! grep -q "@tailwind components" "app/globals.css"; then
    echo "‚ùå @tailwind components manquant dans globals.css !"
    exit 1
fi

if ! grep -q "@tailwind utilities" "app/globals.css"; then
    echo "‚ùå @tailwind utilities manquant dans globals.css !"
    exit 1
fi

# V√©rifier qu'il n'y a pas de dossier styles/ qui pourrait causer des conflits
if [ -d "styles" ]; then
    echo "‚ö†Ô∏è  Dossier styles/ d√©tect√© - suppression..."
    rm -rf styles
fi

# V√©rifier l'int√©grit√© du cache Next.js
echo "üßπ V√©rification du cache Next.js..."
if [ -d ".next" ]; then
    echo "üìä Taille du cache: $(du -sh .next | cut -f1)"
    
    # V√©rifier s'il y a des erreurs dans le cache
    if [ -f ".next/build-manifest.json" ]; then
        echo "‚úÖ build-manifest.json pr√©sent"
    else
        echo "‚ö†Ô∏è  build-manifest.json manquant - cache corrompu d√©tect√©"
        echo "üßπ Nettoyage du cache..."
        rm -rf .next
    fi
else
    echo "‚ÑπÔ∏è  Aucun cache Next.js d√©tect√©"
fi

# V√©rifier les d√©pendances
echo "üì¶ V√©rification des d√©pendances..."
if [ ! -d "node_modules" ]; then
    echo "‚ùå node_modules manquant !"
    echo "üîÑ Installation des d√©pendances..."
    npm install
fi

# V√©rifier que le serveur peut d√©marrer (version am√©lior√©e)
echo "üöÄ Test de d√©marrage du serveur..."
# Arr√™ter tout serveur existant
pkill -f "next dev" 2>/dev/null || true
sleep 2

# D√©marrer le serveur en arri√®re-plan
npm run dev > /dev/null 2>&1 &
SERVER_PID=$!

# Attendre plus longtemps pour le d√©marrage
echo "‚è≥ Attente du d√©marrage du serveur..."
sleep 8

# V√©rifier si le serveur r√©pond
if curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ Serveur d√©marr√© et r√©pond avec succ√®s"
    # Arr√™ter le serveur de test
    kill $SERVER_PID 2>/dev/null || true
    sleep 2
else
    echo "‚ùå √âchec du d√©marrage du serveur"
    kill $SERVER_PID 2>/dev/null || true
    exit 1
fi

echo "‚úÖ V√©rification de sant√© termin√©e avec succ√®s !"
echo ""
echo "üí° Conseils pour √©viter les r√©gressions de design :"
echo "   1. Utilisez 'npm run clean' pour nettoyer le cache"
echo "   2. Utilisez 'npm run fresh' pour reconstruire compl√®tement"
echo "   3. √âvitez de modifier app/globals.css manuellement"
echo "   4. V√©rifiez que tailwind.config.ts est correct"
echo "   5. Assurez-vous qu'il n'y a pas de dossier styles/ concurrent"
echo "   6. Utilisez './health-check.sh' pour diagnostiquer les probl√®mes" 